/// <reference types="node" />
export function stripNullish(object: any): any;
export function objectCopy(to: any, ...from: any[]): {};
export function inspectToolKit(depth?: number, opts?: {
    colors: boolean;
}, inspect?: typeof utilInspect): {
    run: (code: any, count?: number) => void;
    cursor: (cmd: any, count?: number) => string;
    cmd: (code: any) => "" | "\u001B[?47h" | "\u001B[?47l" | "\u001B[?1049h" | "\u001B[?1049l";
    slim: (s: any) => any;
    toggle: ([on, off]: [any, any], s: any) => string;
    reset: (s: any) => string;
    bold: (s: any) => string;
    underlined: (s: any) => string;
    italics: (s: any) => string;
    blinking: (s: any) => string;
    reversed: (s: any) => string;
    strikethru: (s: any) => string;
    black: (s: any) => string;
    red: (s: any) => string;
    green: (s: any) => string;
    yellow: (s: any) => string;
    blue: (s: any) => string;
    magenta: (s: any) => string;
    cyan: (s: any) => string;
    white: (s: any) => string;
    Black: (s: any) => string;
    Red: (s: any) => string;
    Green: (s: any) => string;
    Yellow: (s: any) => string;
    Blue: (s: any) => string;
    Magenta: (s: any) => string;
    Cyan: (s: any) => string;
    White: (s: any) => string;
    _black: (s: any) => string;
    _red: (s: any) => string;
    _green: (s: any) => string;
    _yellow: (s: any) => string;
    _blue: (s: any) => string;
    _magenta: (s: any) => string;
    _cyan: (s: any) => string;
    _white: (s: any) => string;
    _Black: (s: any) => string;
    _Red: (s: any) => string;
    _Green: (s: any) => string;
    _Yellow: (s: any) => string;
    _Blue: (s: any) => string;
    _Magenta: (s: any) => string;
    _Cyan: (s: any) => string;
    _White: (s: any) => string;
    eightBit: ([foreground, background]: [any?, any?] | undefined, s: any) => string;
    twentyFour: ([fRed, fGreen, fBlue, bRed, bGreen, bBlue]: [any?, any?, any?, any?, any?, any?] | undefined, s: any) => string;
    f0: (s: any) => string;
    f1: (s: any) => string;
    f2: (s: any) => string;
    f3: (s: any) => string;
    f4: (s: any) => string;
    f5: (s: any) => string;
    f6: (s: any) => string;
    f7: (s: any) => string;
    b0: (s: any) => string;
    b1: (s: any) => string;
    b2: (s: any) => string;
    b3: (s: any) => string;
    b4: (s: any) => string;
    b5: (s: any) => string;
    b6: (s: any) => string;
    b7: (s: any) => string;
    h0: (s: any) => string;
    h1: (s: any) => string;
    h2: (s: any) => string;
    h3: (s: any) => string;
    h4: (s: any) => string;
    h5: (s: any) => string;
    h6: (s: any) => string;
    h7: (s: any) => string;
    hb0: (s: any) => string;
    hb1: (s: any) => string;
    hb2: (s: any) => string;
    hb3: (s: any) => string;
    hb4: (s: any) => string;
    hb5: (s: any) => string;
    hb6: (s: any) => string;
    hb7: (s: any) => string;
    slimVal: (val: any) => any;
    val: (val: any) => string;
};
import { inspect as utilInspect } from 'util';
